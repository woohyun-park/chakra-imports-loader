module.exports = {
  Accordion: 'accordion',
  AccordionProps: 'accordion',
  AccordionButton: 'accordion',
  AccordionButtonProps: 'accordion',
  useAccordionStyles: 'accordion',
  AccordionIcon: 'accordion',
  AccordionIconProps: 'accordion',
  AccordionItem: 'accordion',
  AccordionItemProps: 'accordion',
  AccordionPanel: 'accordion',
  AccordionPanelProps: 'accordion',
  AccordionProvider: 'accordion',
  ExpandedIndex: 'accordion',
  UseAccordionItemProps: 'accordion',
  UseAccordionItemReturn: 'accordion',
  UseAccordionProps: 'accordion',
  UseAccordionReturn: 'accordion',
  useAccordion: 'accordion',
  useAccordionContext: 'accordion',
  useAccordionItem: 'accordion',
  useAccordionItemState: 'accordion',
  Alert: 'alert',
  AlertProps: 'alert',
  AlertStatus: 'alert',
  useAlertStyles: 'alert',
  AlertDescription: 'alert',
  AlertDescriptionProps: 'alert',
  AlertIcon: 'alert',
  AlertIconProps: 'alert',
  AlertTitle: 'alert',
  AlertTitleProps: 'alert',
  anatomy: 'anatomy',
  accordionAnatomy: 'anatomy',
  alertAnatomy: 'anatomy',
  avatarAnatomy: 'anatomy',
  breadcrumbAnatomy: 'anatomy',
  buttonAnatomy: 'anatomy',
  cardAnatomy: 'anatomy',
  checkboxAnatomy: 'anatomy',
  circularProgressAnatomy: 'anatomy',
  drawerAnatomy: 'anatomy',
  editableAnatomy: 'anatomy',
  formAnatomy: 'anatomy',
  formErrorAnatomy: 'anatomy',
  inputAnatomy: 'anatomy',
  listAnatomy: 'anatomy',
  menuAnatomy: 'anatomy',
  modalAnatomy: 'anatomy',
  numberInputAnatomy: 'anatomy',
  pinInputAnatomy: 'anatomy',
  popoverAnatomy: 'anatomy',
  progressAnatomy: 'anatomy',
  radioAnatomy: 'anatomy',
  selectAnatomy: 'anatomy',
  sliderAnatomy: 'anatomy',
  statAnatomy: 'anatomy',
  switchAnatomy: 'anatomy',
  tableAnatomy: 'anatomy',
  tabsAnatomy: 'anatomy',
  tagAnatomy: 'anatomy',
  Avatar: 'avatar',
  AvatarProps: 'avatar',
  AvatarBadge: 'avatar',
  AvatarBadgeProps: 'avatar',
  useAvatarStyles: 'avatar',
  AvatarGroup: 'avatar',
  AvatarGroupProps: 'avatar',
  GenericAvatarIcon: 'avatar',
  Breadcrumb: 'breadcrumb',
  BreadcrumbProps: 'breadcrumb',
  useBreadcrumbStyles: 'breadcrumb',
  BreadcrumbItem: 'breadcrumb',
  BreadcrumbItemProps: 'breadcrumb',
  BreadcrumbLink: 'breadcrumb',
  BreadcrumbLinkProps: 'breadcrumb',
  BreadcrumbSeparator: 'breadcrumb',
  BreadcrumbSeparatorProps: 'breadcrumb',
  BreadcrumbOptions: 'breadcrumb',
  arrayToObjectNotation: 'utils',
  breakpoints: 'utils',
  isCustomBreakpoint: 'utils',
  isResponsiveObjectLike: 'utils',
  mapResponsive: 'utils',
  objectToArrayNotation: 'utils',
  AnalyzeBreakpointsReturn: 'utils',
  analyzeBreakpoints: 'utils',
  px: 'utils',
  toMediaQueryString: 'utils',
  Button: 'button',
  ButtonProps: 'button',
  ButtonGroup: 'button',
  ButtonGroupProps: 'button',
  IconButton: 'button',
  IconButtonProps: 'button',
  ButtonSpinner: 'button',
  useButtonGroup: 'button',
  ButtonOptions: 'button',
  Card: 'card',
  CardProps: 'card',
  CardBody: 'card',
  CardBodyProps: 'card',
  useCardStyles: 'card',
  CardFooter: 'card',
  CardFooterProps: 'card',
  CardHeader: 'card',
  CardHeaderProps: 'card',
  Checkbox: 'checkbox',
  CheckboxProps: 'checkbox',
  CheckboxGroup: 'checkbox',
  CheckboxGroupProps: 'checkbox',
  CheckboxIcon: 'checkbox',
  CheckboxIconProps: 'checkbox',
  CheckboxGroupContext: 'checkbox',
  CheckboxState: 'checkbox',
  UseCheckboxGroupProps: 'checkbox',
  UseCheckboxGroupReturn: 'checkbox',
  UseCheckboxProps: 'checkbox',
  useCheckboxGroup: 'checkbox',
  UseCheckboxReturn: 'checkbox',
  useCheckbox: 'checkbox',
  UseClickableProps: 'clickable',
  UseClickableReturn: 'clickable',
  useClickable: 'clickable',
  CloseButton: 'close-button',
  CloseButtonProps: 'close-button',
  ColorModeProvider: 'color-mode',
  ColorModeProviderProps: 'color-mode',
  DarkMode: 'color-mode',
  LightMode: 'color-mode',
  cookieStorageManager: 'color-mode',
  cookieStorageManagerSSR: 'color-mode',
  createCookieStorageManager: 'color-mode',
  createLocalStorageManager: 'color-mode',
  localStorageManager: 'color-mode',
  ColorModeScript: 'color-mode',
  ColorModeScriptProps: 'color-mode',
  getScriptSrc: 'color-mode',
  ColorModeContext: 'color-mode',
  useColorMode: 'color-mode',
  useColorModeValue: 'color-mode',
  ColorMode: 'color-mode',
  ColorModeContextType: 'color-mode',
  ColorModeWithSystem: 'color-mode',
  ConfigColorMode: 'color-mode',
  ControlBox: 'control-box',
  ControlBoxOptions: 'control-box',
  ControlBoxProps: 'control-box',
  UseCounterProps: 'counter',
  UseCounterReturn: 'counter',
  useCounter: 'counter',
  CSSPolyfill: 'css-reset',
  CSSReset: 'css-reset',
  CSSResetProps: 'css-reset',
  default: 'visually-hidden',
  Descendant: 'descendant',
  DescendantOptions: 'descendant',
  DescendantsManager: 'descendant',
  UseDescendantsReturn: 'descendant',
  createDescendantContext: 'descendant',
  createDescendantContext: 'descendant',
  FocusableElement: 'utils',
  hasDisplayNone: 'utils',
  hasFocusWithin: 'utils',
  hasNegativeTabIndex: 'utils',
  hasTabIndex: 'utils',
  isActiveElement: 'utils',
  isContentEditable: 'utils',
  isDisabled: 'utils',
  isFocusable: 'utils',
  isHidden: 'utils',
  isInputElement: 'utils',
  isTabbable: 'utils',
  contains: 'utils',
  getActiveElement: 'utils',
  getEventWindow: 'utils',
  getOwnerDocument: 'utils',
  getOwnerWindow: 'utils',
  isBrowser: 'utils',
  isElement: 'utils',
  isHTMLElement: 'utils',
  getAllFocusable: 'utils',
  getAllTabbable: 'utils',
  getFirstFocusable: 'utils',
  getFirstTabbableIn: 'utils',
  getLastTabbableIn: 'utils',
  getNextTabbable: 'utils',
  getPreviousTabbable: 'utils',
  Editable: 'editable',
  EditableProps: 'editable',
  useEditableContext: 'editable',
  useEditableStyles: 'editable',
  EditableInput: 'editable',
  EditableInputProps: 'editable',
  EditablePreview: 'editable',
  EditablePreviewProps: 'editable',
  EditableTextarea: 'editable',
  EditableTextareaProps: 'editable',
  UseEditableProps: 'editable',
  UseEditableReturn: 'editable',
  useEditable: 'editable',
  useEditableControls: 'editable',
  useEditableState: 'editable',
  addDomEvent: 'utils',
  addPointerEvent: 'utils',
  isMouseEvent: 'utils',
  isMultiTouchEvent: 'utils',
  isTouchEvent: 'utils',
  getEventPoint: 'event-utils',
  FocusLock: 'focus-lock',
  FocusLockProps: 'focus-lock',
  FormControl: 'form-control',
  FormControlOptions: 'form-control',
  FormControlProps: 'form-control',
  FormHelperText: 'form-control',
  FormHelperTextProps: 'form-control',
  useFormControlContext: 'form-control',
  useFormControlStyles: 'form-control',
  UseFormControlProps: 'form-control',
  useFormControl: 'form-control',
  useFormControlProps: 'form-control',
  FormErrorIcon: 'form-control',
  FormErrorMessage: 'form-control',
  FormErrorMessageProps: 'form-control',
  useFormErrorStyles: 'form-control',
  FormLabel: 'form-control',
  FormLabelProps: 'form-control',
  RequiredIndicator: 'form-control',
  RequiredIndicatorProps: 'form-control',
  UseAnimationStateProps: 'react-use-animation-state',
  useAnimationState: 'react-use-animation-state',
  useBoolean: 'hooks',
  useCallbackRef: 'react-use-callback-ref',
  UseClipboardOptions: 'hooks',
  useClipboard: 'hooks',
  useConst: 'hooks',
  UseControllableStateProps: 'react-use-controllable-state',
  useControllableProp: 'react-use-controllable-state',
  useControllableState: 'react-use-controllable-state',
  useDimensions: 'hooks',
  UseDisclosureProps: 'react-use-disclosure',
  UseDisclosureReturn: 'react-use-disclosure',
  useDisclosure: 'react-use-disclosure',
  EventListenerEnv: 'hooks',
  useEventListener: 'react-use-event-listener',
  useEventListenerMap: 'hooks',
  UseFocusEffectOptions: 'hooks',
  useFocusEffect: 'hooks',
  UseFocusOnHideOptions: 'react-use-focus-effect',
  useFocusOnHide: 'react-use-focus-effect',
  UseFocusOnMouseDownProps: 'react-use-focus-on-pointer-down',
  useFocusOnPointerDown: 'react-use-focus-on-pointer-down',
  UseFocusOnShowOptions: 'react-use-focus-effect',
  useFocusOnShow: 'react-use-focus-effect',
  useForceUpdate: 'hooks',
  useId: 'hooks',
  useIds: 'hooks',
  useOptionalPart: 'hooks',
  useInterval: 'react-use-interval',
  useLatestRef: 'react-use-latest-ref',
  assignRef: 'react-utils',
  useMergeRefs: 'react-use-merge-refs',
  useMouseDownRef: 'hooks',
  UseOutsideClickProps: 'react-use-outside-click',
  useOutsideClick: 'react-use-outside-click',
  UsePanGestureProps: 'hooks',
  usePanGesture: 'hooks',
  usePointerEvent: 'hooks',
  usePrevious: 'react-use-previous',
  useSafeLayoutEffect: 'react-use-safe-layout-effect',
  UseShortcutProps: 'hooks',
  useShortcut: 'hooks',
  useTimeout: 'react-use-timeout',
  useUnmountEffect: 'hooks',
  useUpdateEffect: 'react-use-update-effect',
  useWhyDidYouUpdate: 'hooks',
  Icon: 'icon',
  IconProps: 'icon',
  createIcon: 'icon',
  Image: 'image',
  ImageProps: 'image',
  Img: 'image',
  ImgProps: 'image',
  UseImageProps: 'image',
  UseImageReturn: 'image',
  useImage: 'image',
  Input: 'input',
  InputProps: 'input',
  InputAddon: 'input',
  InputAddonProps: 'input',
  InputLeftAddon: 'input',
  InputLeftAddonProps: 'input',
  InputRightAddon: 'input',
  InputRightAddonProps: 'input',
  InputGroup: 'input',
  InputGroupProps: 'input',
  useInputGroupStyles: 'input',
  InputElementProps: 'input',
  InputLeftElement: 'input',
  InputLeftElementProps: 'input',
  InputRightElement: 'input',
  InputRightElementProps: 'input',
  AspectRatio: 'layout',
  AspectRatioProps: 'layout',
  Badge: 'layout',
  BadgeProps: 'layout',
  Box: 'layout',
  BoxProps: 'layout',
  Circle: 'layout',
  Square: 'layout',
  SquareProps: 'layout',
  AbsoluteCenter: 'layout',
  AbsoluteCenterProps: 'layout',
  Center: 'layout',
  CenterProps: 'layout',
  Code: 'layout',
  CodeProps: 'layout',
  Container: 'layout',
  ContainerProps: 'layout',
  Divider: 'layout',
  DividerProps: 'layout',
  Flex: 'layout',
  FlexProps: 'layout',
  Grid: 'layout',
  GridProps: 'styled-system',
  GridItem: 'layout',
  GridItemProps: 'layout',
  Heading: 'layout',
  HeadingProps: 'layout',
  Highlight: 'layout',
  HighlightProps: 'layout',
  Mark: 'layout',
  MarkProps: 'layout',
  UseHighlightProps: 'layout',
  useHighlight: 'layout',
  Kbd: 'layout',
  KbdProps: 'layout',
  Link: 'layout',
  LinkProps: 'layout',
  LinkBox: 'layout',
  LinkBoxProps: 'layout',
  LinkOverlay: 'layout',
  LinkOverlayProps: 'layout',
  List: 'layout',
  ListIcon: 'layout',
  ListItem: 'layout',
  ListItemProps: 'layout',
  ListProps: 'styled-system',
  OrderedList: 'layout',
  UnorderedList: 'layout',
  useListStyles: 'layout',
  SimpleGrid: 'layout',
  SimpleGridProps: 'layout',
  Spacer: 'layout',
  SpacerProps: 'layout',
  HStack: 'layout',
  StackDivider: 'layout',
  StackDividerProps: 'layout',
  StackItem: 'layout',
  Stack: 'layout',
  StackProps: 'layout',
  VStack: 'layout',
  StackDirection: 'layout',
  Text: 'layout',
  TextProps: 'layout',
  Wrap: 'layout',
  WrapItem: 'layout',
  WrapItemProps: 'layout',
  WrapProps: 'layout',
  LazyMode: 'lazy-utils',
  lazyDisclosure: 'lazy-utils',
  LiveRegion: 'live-region',
  LiveRegionOptions: 'live-region',
  useLiveRegion: 'live-region',
  Hide: 'media-query',
  HideProps: 'media-query',
  UseQueryProps: 'media-query',
  useQuery: 'media-query',
  useColorModePreference: 'media-query',
  usePrefersReducedMotion: 'media-query',
  Show: 'media-query',
  ShowProps: 'media-query',
  UseBreakpointOptions: 'media-query',
  useBreakpoint: 'media-query',
  useBreakpointValue: 'media-query',
  UseMediaQueryOptions: 'media-query',
  useMediaQuery: 'media-query',
  Menu: 'menu',
  MenuProps: 'menu',
  useMenuStyles: 'menu',
  MenuButton: 'menu',
  MenuButtonProps: 'menu',
  MenuCommand: 'menu',
  MenuCommandProps: 'menu',
  MenuDivider: 'menu',
  MenuDividerProps: 'menu',
  MenuGroup: 'menu',
  MenuGroupProps: 'menu',
  MenuIcon: 'menu',
  MenuItem: 'menu',
  MenuItemProps: 'menu',
  MenuItemOption: 'menu',
  MenuItemOptionProps: 'menu',
  MenuList: 'menu',
  MenuListProps: 'menu',
  MenuOptionGroup: 'menu',
  MenuOptionGroupProps: 'menu',
  MenuDescendantsProvider: 'menu',
  MenuProvider: 'menu',
  UseMenuButtonProps: 'menu',
  UseMenuItemProps: 'menu',
  UseMenuListProps: 'menu',
  UseMenuOptionGroupProps: 'menu',
  UseMenuOptionOptions: 'menu',
  UseMenuOptionProps: 'menu',
  UseMenuProps: 'menu',
  UseMenuReturn: 'menu',
  useMenu: 'menu',
  useMenuButton: 'menu',
  useMenuContext: 'menu',
  useMenuDescendant: 'menu',
  useMenuDescendants: 'menu',
  useMenuDescendantsContext: 'menu',
  useMenuItem: 'menu',
  useMenuList: 'menu',
  useMenuOption: 'menu',
  useMenuOptionGroup: 'menu',
  useMenuPositioner: 'menu',
  useMenuState: 'menu',
  AlertDialog: 'modal',
  AlertDialogContent: 'modal',
  AlertDialogProps: 'modal',
  Drawer: 'modal',
  DrawerProps: 'modal',
  useDrawerContext: 'modal',
  DrawerContent: 'modal',
  DrawerContentProps: 'modal',
  Modal: 'modal',
  ModalContextProvider: 'modal',
  ModalProps: 'modal',
  useModalContext: 'modal',
  useModalStyles: 'modal',
  AlertDialogBody: 'modal',
  DrawerBody: 'modal',
  ModalBody: 'modal',
  ModalBodyProps: 'modal',
  AlertDialogCloseButton: 'modal',
  DrawerCloseButton: 'modal',
  ModalCloseButton: 'modal',
  ModalCloseButtonProps: 'modal',
  ModalContent: 'modal',
  ModalContentProps: 'modal',
  ModalFocusScope: 'modal',
  AlertDialogFooter: 'modal',
  DrawerFooter: 'modal',
  ModalFooter: 'modal',
  ModalFooterProps: 'modal',
  AlertDialogHeader: 'modal',
  DrawerHeader: 'modal',
  ModalHeader: 'modal',
  ModalHeaderProps: 'modal',
  AlertDialogOverlay: 'modal',
  DrawerOverlay: 'modal',
  ModalOverlay: 'modal',
  ModalOverlayProps: 'modal',
  UseModalProps: 'modal',
  UseModalReturn: 'modal',
  useModal: 'modal',
  NumberDecrementStepper: 'number-input',
  NumberDecrementStepperProps: 'number-input',
  NumberIncrementStepper: 'number-input',
  NumberIncrementStepperProps: 'number-input',
  NumberInput: 'number-input',
  NumberInputField: 'number-input',
  NumberInputFieldProps: 'number-input',
  NumberInputProps: 'number-input',
  NumberInputStepper: 'number-input',
  NumberInputStepperProps: 'number-input',
  useNumberInputStyles: 'number-input',
  UseNumberInputProps: 'number-input',
  UseNumberInputReturn: 'number-input',
  useNumberInput: 'number-input',
  clampValue: 'utils',
  countDecimalPlaces: 'utils',
  percentToValue: 'utils',
  roundValueToStep: 'utils',
  toPrecision: 'utils',
  valueToPercent: 'utils',
  assignAfter: 'object-utils',
  compact: 'object-utils',
  omit: 'utils',
  pick: 'utils',
  split: 'utils',
  WalkObjectOptions: 'object-utils',
  WalkObjectStopFn: 'object-utils',
  walkObject: 'utils',
  PinInput: 'pin-input',
  PinInputField: 'pin-input',
  PinInputFieldProps: 'pin-input',
  PinInputProps: 'pin-input',
  PinInputContext: 'pin-input',
  PinInputDescendantsProvider: 'pin-input',
  PinInputProvider: 'pin-input',
  UsePinInputFieldProps: 'pin-input',
  UsePinInputProps: 'pin-input',
  UsePinInputReturn: 'pin-input',
  usePinInput: 'pin-input',
  usePinInputContext: 'pin-input',
  usePinInputField: 'pin-input',
  Popover: 'popover',
  PopoverProps: 'popover',
  UsePopoverProps: 'popover',
  UsePopoverReturn: 'popover',
  usePopover: 'popover',
  PopoverAnchor: 'popover',
  PopoverArrow: 'popover',
  PopoverArrowProps: 'popover',
  PopoverBody: 'popover',
  PopoverBodyProps: 'popover',
  PopoverCloseButton: 'popover',
  PopoverCloseButtonProps: 'popover',
  PopoverContent: 'popover',
  PopoverContentProps: 'popover',
  PopoverFooter: 'popover',
  PopoverFooterProps: 'popover',
  PopoverHeader: 'popover',
  PopoverHeaderProps: 'popover',
  PopoverTrigger: 'popover',
  usePopoverContext: 'popover',
  usePopoverStyles: 'popover',
  PlacementWithLogical: 'popper',
  UsePopperProps: 'popper',
  UsePopperReturn: 'popper',
  usePopper: 'popper',
  popperCSSVars: 'popper',
  Placement: 'popper',
  PortalManager: 'portal',
  PortalManagerProps: 'portal',
  usePortalManager: 'portal',
  Portal: 'portal',
  PortalProps: 'portal',
  CircularProgress: 'progress',
  CircularProgressProps: 'progress',
  Progress: 'progress',
  ProgressFilledTrackProps: 'progress',
  ProgressProps: 'progress',
  ProgressTrackProps: 'progress',
  useProgressStyles: 'progress',
  ProgressLabel: 'progress',
  ProgressLabelProps: 'progress',
  CircularProgressLabel: 'progress',
  CircularProgressLabelProps: 'progress',
  ChakraProvider: 'provider',
  ChakraProviderProps: 'provider',
  Radio: 'radio',
  RadioProps: 'radio',
  UseRadioProps: 'radio',
  UseRadioReturn: 'radio',
  useRadio: 'radio',
  UseRadioGroupProps: 'radio',
  UseRadioGroupReturn: 'radio',
  useRadioGroup: 'radio',
  RadioGroup: 'radio',
  RadioGroupContext: 'radio',
  RadioGroupProps: 'radio',
  useRadioGroupContext: 'radio',
  ChakraBaseProvider: 'provider',
  getValidChildren: 'react-utils',
  CreateContextOptions: 'react-utils',
  CreateContextReturn: 'react-utils',
  createContext: 'react-utils',
  EnvironmentProvider: 'react-env',
  EnvironmentProviderProps: 'react-env',
  useEnvironment: 'react-env',
  ReactRef: 'react-utils',
  mergeRefs: 'react-utils',
  UsePanEventProps: 'react-use-pan-event',
  usePanEvent: 'react-use-pan-event',
  useSize: 'react-use-size',
  useSizes: 'react-use-size',
  EventKeyMap: 'react-utils',
  HTMLProps: 'react-utils',
  MaybeRenderProp: 'react-utils',
  PropGetter: 'react-utils',
  PropGetterV2: 'react-utils',
  Select: 'select',
  SelectProps: 'select',
  SelectField: 'select',
  SelectFieldProps: 'select',
  ariaAttr: 'utils',
  callAll: 'utils',
  callAllHandlers: 'utils',
  cx: 'utils',
  dataAttr: 'utils',
  isObject: 'utils',
  runIfFn: 'utils',
  warn: 'utils',
  Skeleton: 'skeleton',
  SkeletonOptions: 'skeleton',
  SkeletonProps: 'skeleton',
  SkeletonText: 'skeleton',
  SkeletonTextProps: 'skeleton',
  SkeletonCircle: 'skeleton',
  RangeSlider: 'slider',
  RangeSliderFilledTrack: 'slider',
  RangeSliderInnerTrackProps: 'slider',
  RangeSliderMark: 'slider',
  RangeSliderMarkProps: 'slider',
  RangeSliderProps: 'slider',
  RangeSliderProvider: 'slider',
  RangeSliderThumb: 'slider',
  RangeSliderThumbProps: 'slider',
  RangeSliderTrack: 'slider',
  RangeSliderTrackProps: 'slider',
  useRangeSliderContext: 'slider',
  useRangeSliderStyles: 'slider',
  Slider: 'slider',
  SliderFilledTrack: 'slider',
  SliderInnerTrackProps: 'slider',
  SliderMark: 'slider',
  SliderMarkProps: 'slider',
  SliderProps: 'slider',
  SliderProvider: 'slider',
  SliderThumb: 'slider',
  SliderThumbProps: 'slider',
  SliderTrack: 'slider',
  SliderTrackProps: 'slider',
  useSliderContext: 'slider',
  useSliderStyles: 'slider',
  UseRangeSliderProps: 'slider',
  UseRangeSliderReturn: 'slider',
  useRangeSlider: 'slider',
  UseSliderProps: 'slider',
  UseSliderReturn: 'slider',
  useSlider: 'slider',
  Spinner: 'spinner',
  SpinnerProps: 'spinner',
  Stat: 'stat',
  StatProps: 'stat',
  useStatStyles: 'stat',
  StatArrow: 'stat',
  StatArrowProps: 'stat',
  StatDownArrow: 'stat',
  StatUpArrow: 'stat',
  StatGroup: 'stat',
  StatGroupProps: 'stat',
  StatHelpText: 'stat',
  StatHelpTextProps: 'stat',
  StatLabel: 'stat',
  StatLabelProps: 'stat',
  StatNumber: 'stat',
  StatNumberProps: 'stat',
  Step: 'stepper',
  StepProps: 'stepper',
  StepStatusType: 'stepper',
  useStepContext: 'stepper',
  useStepperStyles: 'stepper',
  StepDescription: 'stepper',
  StepDescriptionProps: 'stepper',
  StepIcon: 'stepper',
  StepIndicator: 'stepper',
  StepIndicatorProps: 'stepper',
  StepNumber: 'stepper',
  StepSeparator: 'stepper',
  StepStatus: 'stepper',
  StepStatusProps: 'stepper',
  StepTitle: 'stepper',
  StepTitleProps: 'stepper',
  Stepper: 'stepper',
  StepperProps: 'stepper',
  UseStepsProps: 'stepper',
  UseStepsReturn: 'stepper',
  useSteps: 'stepper',
  BaseThemeTypings: 'styled-system',
  BackgroundProps: 'styled-system',
  BorderProps: 'styled-system',
  CSSObject: 'styled-system',
  CSSWithMultiValues: 'styled-system',
  ColorProps: 'styled-system',
  CustomThemeTypings: 'styled-system',
  EffectProps: 'styled-system',
  FilterProps: 'styled-system',
  FlatToken: 'styled-system',
  FlatTokens: 'styled-system',
  FlattenTokensParam: 'styled-system',
  FlexboxProps: 'styled-system',
  FunctionCSSInterpolation: 'styled-system',
  InteractivityProps: 'styled-system',
  LayoutProps: 'styled-system',
  MultiStyleConfig: 'theme-tools',
  OmitSpaceXY: 'styled-system',
  Operand: 'theme-tools',
  OtherProps: 'styled-system',
  PartsStyleFunction: 'theme-tools',
  PartsStyleInterpolation: 'theme-tools',
  PartsStyleObject: 'theme-tools',
  PlainToken: 'styled-system',
  PositionProps: 'styled-system',
  Pseudos: 'styled-system',
  RecursiveCSSObject: 'styled-system',
  RecursiveCSSSelector: 'styled-system',
  RecursivePseudo: 'styled-system',
  ResponsiveArray: 'styled-system',
  ResponsiveObject: 'styled-system',
  ResponsiveValue: 'styled-system',
  RingProps: 'styled-system',
  ScrollProps: 'styled-system',
  SemanticToken: 'styled-system',
  SemanticValue: 'styled-system',
  SpaceProps: 'styled-system',
  StyleConfig: 'theme-tools',
  StyleFunctionProps: 'theme-tools',
  StyleObjectOrFn: 'styled-system',
  StyleProps: 'styled-system',
  SystemCSSProperties: 'styled-system',
  SystemProps: 'styled-system',
  SystemStyleFunction: 'theme-tools',
  SystemStyleInterpolation: 'theme-tools',
  SystemStyleObject: 'theme-tools',
  TextDecorationProps: 'styled-system',
  ThemeScale: 'styled-system',
  ThemeThunk: 'styled-system',
  ThemeTypings: 'styled-system',
  ThemingProps: 'styled-system',
  TransformProps: 'styled-system',
  TransitionProps: 'styled-system',
  TypographyProps: 'styled-system',
  WithCSSVar: 'styled-system',
  addPrefix: 'theme-tools',
  background: 'styled-system',
  border: 'styled-system',
  calc: 'theme-tools',
  color: 'styled-system',
  createMultiStyleConfigHelpers: 'styled-system',
  css: 'styled-system',
  cssVar: 'theme-tools',
  defineCssVars: 'styled-system',
  defineStyle: 'styled-system',
  defineStyleConfig: 'styled-system',
  effect: 'styled-system',
  filter: 'styled-system',
  flattenTokens: 'styled-system',
  flexbox: 'styled-system',
  getCSSVar: 'utils',
  getCss: 'styled-system',
  grid: 'styled-system',
  interactivity: 'styled-system',
  isStyleProp: 'styled-system',
  layout: 'styled-system',
  layoutPropNames: 'styled-system',
  list: 'styled-system',
  omitThemingProps: 'styled-system',
  others: 'styled-system',
  position: 'styled-system',
  propNames: 'styled-system',
  pseudoPropNames: 'styled-system',
  pseudoSelectors: 'styled-system',
  resolveStyleConfig: 'styled-system',
  ring: 'styled-system',
  scroll: 'styled-system',
  space: 'styled-system',
  systemProps: 'styled-system',
  textDecoration: 'styled-system',
  toCSSVar: 'styled-system',
  toVarDefinition: 'styled-system',
  toVarReference: 'styled-system',
  tokenToCSSVar: 'styled-system',
  transform: 'styled-system',
  transition: 'styled-system',
  typography: 'styled-system',
  Switch: 'switch',
  SwitchProps: 'switch',
  Interpolation: 'system',
  keyframes: 'system',
  getToken: 'system',
  useChakra: 'system',
  useToken: 'system',
  As: 'system',
  ChakraComponent: 'system',
  ChakraProps: 'system',
  ComponentWithAs: 'system',
  MergeWithAs: 'system',
  OmitCommonProps: 'system',
  PropsOf: 'system',
  RightJoinProps: 'system',
  CSSVars: 'system',
  CSSVarsProps: 'system',
  CreateStyleContextReturn: 'system',
  GlobalStyle: 'system',
  StylesProvider: 'system',
  ThemeProvider: 'system',
  ThemeProviderProps: 'system',
  createStylesContext: 'system',
  useStyles: 'system',
  ChakraStyledOptions: 'system',
  HTMLChakraComponents: 'system',
  HTMLChakraProps: 'system',
  styled: 'system',
  toCSSObject: 'system',
  forwardRef: 'system',
  useComponentStyles__unstable: 'system',
  useMultiStyleConfig: 'system',
  useStyleConfig: 'system',
  chakra: 'system',
  shouldForwardProp: 'system',
  useTheme: 'system',
  Table: 'table',
  TableOptions: 'table',
  TableProps: 'table',
  useTableStyles: 'table',
  TableCaption: 'table',
  TableCaptionProps: 'table',
  TableContainer: 'table',
  TableContainerProps: 'table',
  TableBodyProps: 'table',
  Tbody: 'table',
  TableCellProps: 'table',
  Td: 'table',
  TableFooterProps: 'table',
  Tfoot: 'table',
  TableColumnHeaderProps: 'table',
  Th: 'table',
  TableHeadProps: 'table',
  Thead: 'table',
  TableRowProps: 'table',
  Tr: 'table',
  Tab: 'tabs',
  TabProps: 'tabs',
  TabIndicator: 'tabs',
  TabIndicatorProps: 'tabs',
  TabList: 'tabs',
  TabListProps: 'tabs',
  TabPanel: 'tabs',
  TabPanelProps: 'tabs',
  TabPanels: 'tabs',
  TabPanelsProps: 'tabs',
  Tabs: 'tabs',
  TabsProps: 'tabs',
  useTabsStyles: 'tabs',
  TabsDescendantsProvider: 'tabs',
  TabsProvider: 'tabs',
  UseTabListProps: 'tabs',
  UseTabListReturn: 'tabs',
  UseTabOptions: 'tabs',
  UseTabPanelsProps: 'tabs',
  UseTabProps: 'tabs',
  UseTabsProps: 'tabs',
  UseTabsReturn: 'tabs',
  useTab: 'tabs',
  useTabIndicator: 'tabs',
  useTabList: 'tabs',
  useTabPanel: 'tabs',
  useTabPanels: 'tabs',
  useTabs: 'tabs',
  useTabsContext: 'tabs',
  useTabsDescendant: 'tabs',
  useTabsDescendants: 'tabs',
  useTabsDescendantsContext: 'tabs',
  Tag: 'tag',
  TagCloseButton: 'tag',
  TagCloseButtonProps: 'tag',
  TagLabel: 'tag',
  TagLabelProps: 'tag',
  TagLeftIcon: 'tag',
  TagProps: 'tag',
  TagRightIcon: 'tag',
  useTagStyles: 'tag',
  Textarea: 'textarea',
  TextareaProps: 'textarea',
  ChakraTheme: 'theme',
  ColorHues: 'theme',
  Colors: 'theme',
  ComponentDefaultProps: 'theme',
  ComponentMultiStyleConfig: 'theme',
  ComponentSingleStyleConfig: 'theme',
  ComponentStyleConfig: 'theme',
  RecursiveObject: 'theme',
  RecursiveProperty: 'theme',
  SystemStyleObjectRecord: 'theme',
  ThemeComponentFunction: 'theme',
  ThemeComponentProps: 'theme',
  ThemeComponents: 'theme',
  ThemeConfig: 'theme',
  ThemeDirection: 'theme',
  ThemeTransitions: 'theme',
  ThemingPropsThunk: 'theme',
  isChakraTheme: 'theme',
  requiredChakraThemeKeys: 'theme',
  Theme: 'theme',
  baseTheme: 'theme',
  theme: 'theme',
  blacken: 'theme-tools',
  complementary: 'theme-tools',
  contrast: 'theme-tools',
  darken: 'theme-tools',
  generateStripe: 'theme-tools',
  getColor: 'theme-tools',
  isAccessible: 'theme-tools',
  isDark: 'theme-tools',
  isLight: 'theme-tools',
  isReadable: 'theme-tools',
  lighten: 'theme-tools',
  randomColor: 'theme-tools',
  readability: 'theme-tools',
  tone: 'theme-tools',
  transparentize: 'theme-tools',
  whiten: 'theme-tools',
  GlobalStyleProps: 'theme-tools',
  GlobalStyles: 'theme-tools',
  JSXElementStyles: 'theme-tools',
  Styles: 'theme-tools',
  mode: 'theme-tools',
  orient: 'theme-tools',
  BaseBreakpointConfig: 'theme-tools',
  Breakpoints: 'theme-tools',
  createBreakpoints: 'theme-tools',
  CalcChain: 'theme-tools',
  CSSVar: 'theme-tools',
  CSSVarOptions: 'theme-tools',
  isDecimal: 'theme-tools',
  toVar: 'theme-tools',
  toVarRef: 'theme-tools',
  BaseThemeWithExtensions: 'theme-utils',
  DeepPartial: 'theme-utils',
  ThemeExtension: 'theme-utils',
  ThemeOverride: 'theme-utils',
  extendBaseTheme: 'theme-utils',
  extendTheme: 'theme-utils',
  mergeThemeOverride: 'theme-utils',
  withDefaultColorScheme: 'theme-utils',
  withDefaultSize: 'theme-utils',
  withDefaultVariant: 'theme-utils',
  withDefaultProps: 'theme-utils',
  CreateToastFnReturn: 'toast',
  Toast: 'toast',
  ToastId: 'toast',
  ToastMessage: 'toast',
  ToastOptions: 'toast',
  ToastProps: 'toast',
  ToastState: 'toast',
  UseToastOptions: 'toast',
  createRenderToast: 'toast',
  createToastFn: 'toast',
  useToast: 'toast',
  CreateToastOptions: 'toast',
  ToastMethods: 'toast',
  ToastOptionProvider: 'toast',
  ToastProvider: 'toast',
  ToastProviderProps: 'toast',
  LogicalToastPosition: 'toast',
  ToastPosition: 'toast',
  ToastPositionWithLogical: 'toast',
  getToastPlacement: 'toast',
  CreateStandAloneToastParam: 'toast',
  CreateStandaloneToastReturn: 'toast',
  createStandaloneToast: 'toast',
  Tooltip: 'tooltip',
  TooltipProps: 'tooltip',
  UseTooltipProps: 'tooltip',
  UseTooltipReturn: 'tooltip',
  useTooltip: 'tooltip',
  Collapse: 'transition',
  CollapseOptions: 'transition',
  CollapseProps: 'transition',
  ICollapse: 'transition',
  Fade: 'transition',
  FadeProps: 'transition',
  fadeConfig: 'transition',
  ScaleFade: 'transition',
  ScaleFadeProps: 'transition',
  scaleFadeConfig: 'transition',
  Slide: 'transition',
  SlideOptions: 'transition',
  SlideProps: 'transition',
  SlideFade: 'transition',
  SlideFadeProps: 'transition',
  slideFadeConfig: 'transition',
  EASINGS: 'transition',
  SlideDirection: 'transition',
  TransitionProperties: 'transition',
  getSlideTransition: 'transition',
  withDelay: 'transition',
  addItem: 'utils',
  chunk: 'utils',
  getFirstItem: 'utils',
  getLastItem: 'utils',
  getNextIndex: 'utils',
  getNextItem: 'utils',
  getNextItemFromSearch: 'utils',
  getPrevIndex: 'utils',
  getPrevItem: 'utils',
  removeIndex: 'utils',
  removeItem: 'utils',
  __DEV__: 'utils',
  __TEST__: 'utils',
  isArray: 'utils',
  isCssVar: 'utils',
  isDefined: 'utils',
  isEmpty: 'utils',
  isEmptyArray: 'utils',
  isEmptyObject: 'utils',
  isFunction: 'utils',
  isInputEvent: 'utils',
  isNotEmptyObject: 'utils',
  isNotNumber: 'utils',
  isNull: 'utils',
  isNumber: 'utils',
  isNumeric: 'utils',
  isRefObject: 'utils',
  isString: 'utils',
  isUndefined: 'utils',
  canUseDOM: 'utils',
  getRelatedTarget: 'utils',
  isRightClick: 'utils',
  normalizeEventKey: 'utils',
  closest: 'utils',
  focusNextTabbable: 'utils',
  focusPreviousTabbable: 'utils',
  ExtendedFocusOptions: 'utils',
  focus: 'utils',
  flatten: 'utils',
  MaybeFunction: 'utils',
  compose: 'utils',
  distance: 'utils',
  error: 'utils',
  noop: 'utils',
  once: 'utils',
  pipe: 'utils',
  LazyBehavior: 'utils',
  determineLazyBehavior: 'utils',
  maxSafeInteger: 'utils',
  minSafeInteger: 'utils',
  filterUndefined: 'utils',
  fromEntries: 'utils',
  get: 'utils',
  getWithDefault: 'utils',
  memoize: 'utils',
  memoizedGet: 'utils',
  objectFilter: 'utils',
  objectKeys: 'utils',
  PanEventHandler: 'utils',
  PanEventInfo: 'utils',
  PanSession: 'utils',
  PanSessionHandlers: 'utils',
  PanSessionOptions: 'utils',
  AnyPointerEvent: 'utils',
  EventHandler: 'utils',
  EventListenerWithPointInfo: 'utils',
  Point: 'utils',
  PointerEventInfo: 'utils',
  extractEventInfo: 'utils',
  getPointerEventName: 'utils',
  getViewportPointFromEvent: 'utils',
  wrapPointerEventHandler: 'utils',
  AnyFunction: 'utils',
  Booleanish: 'utils',
  Dict: 'utils',
  EventKeys: 'utils',
  FunctionArguments: 'utils',
  LiteralUnion: 'utils',
  Merge: 'utils',
  Omit: 'utils',
  StringOrNumber: 'utils',
  UnionStringArray: 'utils',
  UserAgentBrowser: 'utils',
  UserAgentDeviceType: 'utils',
  UserAgentOS: 'utils',
  detectBrowser: 'utils',
  detectDeviceType: 'utils',
  detectOS: 'utils',
  detectTouch: 'utils',
  MappedLeavesObject: 'utils',
  WalkObjectPredicate: 'utils',
  mergeWith: 'utils',
  VisuallyHidden: 'visually-hidden',
  VisuallyHiddenInput: 'visually-hidden',
  visuallyHiddenStyle: 'visually-hidden',
};
